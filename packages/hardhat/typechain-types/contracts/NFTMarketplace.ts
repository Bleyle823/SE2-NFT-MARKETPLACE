/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace NFTMarketplace {
  export type ListingStruct = {
    listingId: BigNumberish;
    nftContract: AddressLike;
    tokenId: BigNumberish;
    seller: AddressLike;
    price: BigNumberish;
    isActive: boolean;
    createdAt: BigNumberish;
  };

  export type ListingStructOutput = [
    listingId: bigint,
    nftContract: string,
    tokenId: bigint,
    seller: string,
    price: bigint,
    isActive: boolean,
    createdAt: bigint
  ] & {
    listingId: bigint;
    nftContract: string;
    tokenId: bigint;
    seller: string;
    price: bigint;
    isActive: boolean;
    createdAt: bigint;
  };
}

export interface NFTMarketplaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "buyTicket"
      | "cancelListing"
      | "getActiveListings"
      | "getListing"
      | "listTicket"
      | "listings"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ListingCancelled" | "TicketListed" | "TicketSold"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "buyTicket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveListings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listTicket",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listings",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "buyTicket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getListing", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listTicket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listings", data: BytesLike): Result;
}

export namespace ListingCancelledEvent {
  export type InputTuple = [
    listingId: BigNumberish,
    nftContract: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [
    listingId: bigint,
    nftContract: string,
    tokenId: bigint
  ];
  export interface OutputObject {
    listingId: bigint;
    nftContract: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TicketListedEvent {
  export type InputTuple = [
    listingId: BigNumberish,
    nftContract: AddressLike,
    tokenId: BigNumberish,
    seller: AddressLike,
    price: BigNumberish
  ];
  export type OutputTuple = [
    listingId: bigint,
    nftContract: string,
    tokenId: bigint,
    seller: string,
    price: bigint
  ];
  export interface OutputObject {
    listingId: bigint;
    nftContract: string;
    tokenId: bigint;
    seller: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TicketSoldEvent {
  export type InputTuple = [
    listingId: BigNumberish,
    nftContract: AddressLike,
    tokenId: BigNumberish,
    seller: AddressLike,
    buyer: AddressLike,
    price: BigNumberish
  ];
  export type OutputTuple = [
    listingId: bigint,
    nftContract: string,
    tokenId: bigint,
    seller: string,
    buyer: string,
    price: bigint
  ];
  export interface OutputObject {
    listingId: bigint;
    nftContract: string;
    tokenId: bigint;
    seller: string;
    buyer: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NFTMarketplace extends BaseContract {
  connect(runner?: ContractRunner | null): NFTMarketplace;
  waitForDeployment(): Promise<this>;

  interface: NFTMarketplaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buyTicket: TypedContractMethod<[listingId: BigNumberish], [void], "payable">;

  cancelListing: TypedContractMethod<
    [listingId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getActiveListings: TypedContractMethod<
    [],
    [NFTMarketplace.ListingStructOutput[]],
    "view"
  >;

  getListing: TypedContractMethod<
    [listingId: BigNumberish],
    [NFTMarketplace.ListingStructOutput],
    "view"
  >;

  listTicket: TypedContractMethod<
    [nftContract: AddressLike, tokenId: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;

  listings: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, string, bigint, boolean, bigint] & {
        listingId: bigint;
        nftContract: string;
        tokenId: bigint;
        seller: string;
        price: bigint;
        isActive: boolean;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buyTicket"
  ): TypedContractMethod<[listingId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "cancelListing"
  ): TypedContractMethod<[listingId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getActiveListings"
  ): TypedContractMethod<[], [NFTMarketplace.ListingStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getListing"
  ): TypedContractMethod<
    [listingId: BigNumberish],
    [NFTMarketplace.ListingStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "listTicket"
  ): TypedContractMethod<
    [nftContract: AddressLike, tokenId: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "listings"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, string, bigint, boolean, bigint] & {
        listingId: bigint;
        nftContract: string;
        tokenId: bigint;
        seller: string;
        price: bigint;
        isActive: boolean;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "ListingCancelled"
  ): TypedContractEvent<
    ListingCancelledEvent.InputTuple,
    ListingCancelledEvent.OutputTuple,
    ListingCancelledEvent.OutputObject
  >;
  getEvent(
    key: "TicketListed"
  ): TypedContractEvent<
    TicketListedEvent.InputTuple,
    TicketListedEvent.OutputTuple,
    TicketListedEvent.OutputObject
  >;
  getEvent(
    key: "TicketSold"
  ): TypedContractEvent<
    TicketSoldEvent.InputTuple,
    TicketSoldEvent.OutputTuple,
    TicketSoldEvent.OutputObject
  >;

  filters: {
    "ListingCancelled(uint256,address,uint256)": TypedContractEvent<
      ListingCancelledEvent.InputTuple,
      ListingCancelledEvent.OutputTuple,
      ListingCancelledEvent.OutputObject
    >;
    ListingCancelled: TypedContractEvent<
      ListingCancelledEvent.InputTuple,
      ListingCancelledEvent.OutputTuple,
      ListingCancelledEvent.OutputObject
    >;

    "TicketListed(uint256,address,uint256,address,uint256)": TypedContractEvent<
      TicketListedEvent.InputTuple,
      TicketListedEvent.OutputTuple,
      TicketListedEvent.OutputObject
    >;
    TicketListed: TypedContractEvent<
      TicketListedEvent.InputTuple,
      TicketListedEvent.OutputTuple,
      TicketListedEvent.OutputObject
    >;

    "TicketSold(uint256,address,uint256,address,address,uint256)": TypedContractEvent<
      TicketSoldEvent.InputTuple,
      TicketSoldEvent.OutputTuple,
      TicketSoldEvent.OutputObject
    >;
    TicketSold: TypedContractEvent<
      TicketSoldEvent.InputTuple,
      TicketSoldEvent.OutputTuple,
      TicketSoldEvent.OutputObject
    >;
  };
}
